import numpy as np
from PIL import Image, ImageDraw, ImageFont
import math
import os
import json
from sklearn.cluster import KMeans
from scipy.spatial import KDTree


class CrossStitchGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –≤—ã—à–∏–≤–∫–∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–º –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """

    def __init__(self, dmc_palette_file="dmc_colors.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–ª–∏—Ç—Ä—É DMC –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
        """
        self.dmc_palette = self._load_dmc_palette(dmc_palette_file)
        self.dmc_codes, self.dmc_rgb_values = self._prepare_palette_for_tree()
        self.dmc_tree = KDTree(self.dmc_rgb_values)

        # –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å.
        self.symbols = [
            '‚ñ†', '‚ñ°', '‚óè', '‚óã', '‚ñ≤', '‚ñ≥', '‚ñº', '‚ñΩ', '‚óÜ', '‚óá',
            '‚òÖ', '‚òÜ', '‚ô†', '‚ô£', '‚ô•', '‚ô¶', '‚óà', '‚óâ', '‚óé', '‚ú¶',
            '‚ú∂', '‚ú∑', '‚ú∏', '‚úπ', '‚ú∫', '‚úª', '‚úº', '‚úΩ', '‚úæ', '‚ùÄ',
            '‚ú¢', '‚ú£', '‚ú§', '‚ú•', '‚úö', '‚úó', '‚úò', '‚úô', '‚àì', '‚äï',
            '‚äó', '‚äô', '‚äö', '‚äõ', '‚äú', '‚äù', '‚äû', '‚äü', '‚ä†', '‚ä°',
            '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            '[', '\\', ']', '^', '_', '`',
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
            '{', '|', '}', '~',
            '¬°', '¬¢', '¬£', '¬§', '¬•', '¬¶', '¬ß', '¬®', '¬©', '¬™', '¬´', '¬¨', '¬Æ', '¬Ø', '¬∞', '¬±', '¬≤', '¬≥', '¬¥', '¬µ', '¬∂', '¬∑', '¬∏', '¬π', '¬∫', '¬ª', '¬º', '¬Ω', '¬æ', '¬ø',
            '√Ä', '√Å', '√Ç', '√É', '√Ñ', '√Ö', '√Ü', '√á', '√à', '√â', '√ä', '√ã', '√å', '√ç', '√é', '√è', '√ê', '√ë', '√í', '√ì', '√î', '√ï', '√ñ', '√ó', '√ò', '√ô', '√ö', '√õ', '√ú', '√ù', '√û', '√ü',
            '√†', '√°', '√¢', '√£', '√§', '√•', '√¶', '√ß', '√®', '√©', '√™', '√´', '√¨', '√≠', '√Æ', '√Ø', '√∞', '√±', '√≤', '√≥', '√¥', '√µ', '√∂', '√∑', '√∏', '√π', '√∫', '√ª', '√º', '√Ω', '√æ', '√ø',
            '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–´', '–¨', '–≠', '–Æ', '–Ø',
            '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è',
            '‚Ññ', '—ë', '–Å',
            '‚âà', '‚â†', '‚â°', '‚â§', '‚â•', '‚à´', '‚àë', '‚àè', '‚àö', '‚àù', '‚àû', '‚àá', '‚àÇ',
            'Œ±', 'Œ≤', 'Œ≥', 'Œ¥', 'Œµ', 'Œ∂', 'Œ∑', 'Œ∏', 'Œπ', 'Œ∫', 'Œª', 'Œº', 'ŒΩ', 'Œæ', 'Œø', 'œÄ', 'œÅ', 'œÉ', 'œÑ', 'œÖ', 'œÜ', 'œá', 'œà', 'œâ',
            'Œ©', 'Œî', 'Œ¶', 'Œ†', 'Œ®', 'Œ£', 'Œû', 'Œõ', 'Œì', 'Œò', 'Œ®',
        ]

    def _load_dmc_palette(self, filename):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ DMC –∏–∑ JSON-—Ñ–∞–π–ª–∞.
        """
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –ø–∞–ª–∏—Ç—Ä—ã '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ '{filename}'.")
            return []

    def _prepare_palette_for_tree(self):
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é KDTree.
        """
        codes = []
        rgb_values = []
        for color in self.dmc_palette:
            codes.append((color['code'], color['name'], tuple(color['rgb'])))
            rgb_values.append(color['rgb'])
        return codes, np.array(rgb_values)

    def load_and_resize_image(self, image_path, max_stitches):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.
        """
        try:
            image = Image.open(image_path).convert('RGB')
            width, height = image.size

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä, —á—Ç–æ–±—ã –æ–¥–Ω–∞ –∏–∑ —Å—Ç–æ—Ä–æ–Ω –±—ã–ª–∞ —Ä–∞–≤–Ω–∞ max_stitches
            if width > height:
                new_width = max_stitches
                new_height = int(height * (new_width / width))
            else:
                new_height = max_stitches
                new_width = int(width * (new_height / height))

            resized_image = image.resize((new_width, new_height), Image.LANCZOS)
            return resized_image, new_width, new_height
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None, 0, 0

    def find_closest_dmc(self, rgb_color):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ü–≤–µ—Ç DMC —Å –ø–æ–º–æ—â—å—é KDTree.
        """
        distance, index = self.dmc_tree.query(rgb_color)
        return self.dmc_codes[index]

    def get_text_color_for_background(self, bg_color):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—á–µ—Ä–Ω—ã–π –∏–ª–∏ –±–µ–ª—ã–π) –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
        """
        r, g, b = bg_color
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ (luminance)
        brightness = (r * 0.299 + g * 0.587 + b * 0.114)
        return (0, 0, 0) if brightness > 186 else (255, 255, 255)

    def generate_pattern(self, image_path, max_stitches=150, max_colors=50, cell_size=20):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã.
        """
        print("---")
        print(f"üõ†Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã –¥–ª—è: '{image_path}'")
        print(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å—Ö–µ–º—ã: {max_stitches} –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {max_colors}")
        print("---")

        image, width, height = self.load_and_resize_image(image_path, max_stitches)
        if image is None:
            return

        pixels = np.array(image).reshape(-1, 3)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º K-Means –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
        print("üé® –ü—Ä–∏–º–µ–Ω—è–µ–º K-Means –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤...")
        kmeans = KMeans(n_clusters=max_colors, random_state=0, n_init='auto')
        kmeans.fit(pixels)

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ –º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
        cluster_centers = kmeans.cluster_centers_.astype(int)
        pixel_labels = kmeans.labels_

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–∞ DMC-—Ü–≤–µ—Ç –∏ —Å–∏–º–≤–æ–ª
        cluster_to_dmc_info = {}
        unique_dmc_info = {}
        for i, center in enumerate(cluster_centers):
            dmc_code, dmc_name, dmc_rgb = self.find_closest_dmc(tuple(center))
            if dmc_code not in unique_dmc_info:
                symbol = self.symbols[len(unique_dmc_info) % len(self.symbols)]
                unique_dmc_info[dmc_code] = {
                    'code': dmc_code,
                    'name': dmc_name,
                    'rgb': dmc_rgb,
                    'symbol': symbol,
                    'count': 0
                }
            cluster_to_dmc_info[i] = unique_dmc_info[dmc_code]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
        for label in pixel_labels:
            dmc_info = cluster_to_dmc_info.get(label)
            if dmc_info:
                dmc_info['count'] += 1

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã
        img_width = width * cell_size + 200
        img_height = height * cell_size + 200 + len(unique_dmc_info) * 40

        pattern_image = Image.new('RGB', (img_width, img_height), color='white')
        draw = ImageDraw.Draw(pattern_image)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
        try:
            font_path = "arial.ttf"
            if os.name == 'nt':  # Windows
                font_path = "C:/Windows/Fonts/Arial.ttf"
            elif os.name == 'posix':  # Mac, Linux
                font_path = "/Library/Fonts/Arial.ttf"

            title_font = ImageFont.truetype(font_path, 20)
            symbol_font = ImageFont.truetype(font_path, int(cell_size * 0.6))
            legend_font = ImageFont.truetype(font_path, 14)
        except Exception:
            print("‚ùå –®—Ä–∏—Ñ—Ç Arial –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            title_font = ImageFont.load_default()
            symbol_font = ImageFont.load_default()
            legend_font = ImageFont.load_default()

        # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = f"–°–•–ï–ú–ê –í–´–®–ò–í–ö–ò –ö–†–ï–°–¢–ò–ö–û–ú - {width}x{height} –ö–†–ï–°–¢–ò–ö–û–í"
        draw.text(((img_width - draw.textlength(title, font=title_font)) / 2, 20),
                  title, fill='black', font=title_font)

        # –†–∏—Å—É–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ —Å–µ—Ç–∫—É
        self._draw_grid_and_numbers(draw, width, height, cell_size, legend_font)

        # –†–∏—Å—É–µ–º –∫—Ä–µ—Å—Ç–∏–∫–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
        self._draw_cross_stitches(draw, pixel_labels, cluster_to_dmc_info, width, height, cell_size, symbol_font)

        # –†–∏—Å—É–µ–º –ª–µ–≥–µ–Ω–¥—É
        self._draw_legend(draw, unique_dmc_info, img_width, height, cell_size, legend_font)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        output_filename = f"scheme_{width}x{height}_{len(unique_dmc_info)}colors.png"
        self._save_pattern_image(pattern_image, output_filename, width, height, len(unique_dmc_info))

    def _draw_grid_and_numbers(self, draw, width, height, cell_size, font):
        """–†–∏—Å—É–µ—Ç —Å–µ—Ç–∫—É –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é."""
        x_offset, y_offset = 100, 100
        for y in range(height + 1):
            y_pos = y * cell_size + y_offset
            draw.line([(x_offset, y_pos), (width * cell_size + x_offset, y_pos)],
                      fill='lightgray' if y % 10 != 0 else 'gray', width=1 if y % 10 != 0 else 2)
            if y % 10 == 0 and y > 0:
                draw.text((x_offset - 30, y_pos - cell_size / 2 - 7), str(y), fill='black', font=font)

        for x in range(width + 1):
            x_pos = x * cell_size + x_offset
            draw.line([(x_pos, y_offset), (x_pos, height * cell_size + y_offset)],
                      fill='lightgray' if x % 10 != 0 else 'gray', width=1 if x % 10 != 0 else 2)
            if x % 10 == 0 and x > 0:
                draw.text((x_pos - cell_size / 2 - 7, y_offset - 30), str(x), fill='black', font=font)

    def _draw_cross_stitches(self, draw, pixel_labels, cluster_to_dmc_info, width, height, cell_size, font):
        """–†–∏—Å—É–µ—Ç –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É —Å—Ö–µ–º—ã."""
        x_offset, y_offset = 100, 100
        for i, label in enumerate(pixel_labels):
            x = i % width
            y = i // width

            dmc_info = cluster_to_dmc_info.get(label)
            if not dmc_info:
                continue

            color_rgb = dmc_info['rgb']
            symbol = dmc_info['symbol']
            text_color = self.get_text_color_for_background(color_rgb)

            x1, y1 = x * cell_size + x_offset, y * cell_size + y_offset
            x2, y2 = x1 + cell_size, y1 + cell_size

            draw.rectangle([x1, y1, x2, y2], fill=color_rgb)

            bbox = draw.textbbox((0, 0), symbol, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            text_x = x1 + (cell_size - text_width) / 2
            text_y = y1 + (cell_size - text_height) / 2
            draw.text((text_x, text_y), symbol, fill=text_color, font=font)

    def _draw_legend(self, draw, dmc_info, img_width, height, cell_size, font):
        """
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã.
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è.
        """
        sorted_colors = sorted(dmc_info.values(), key=lambda x: x['count'], reverse=True)

        legend_x, legend_y = 100, height * cell_size + 150
        current_x = legend_x
        row_y = legend_y

        for info in sorted_colors:
            # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ª–µ–≥–µ–Ω–¥–µ
            text_content = f"{info['symbol']} {info['code']} ({info['name']}) - {info['count']} —à—Ç."

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            text_bbox = draw.textbbox((0, 0), text_content, font=font)
            text_width = text_bbox[2] - text_bbox[0]

            # –®–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–µ–≥–µ–Ω–¥—ã (–∫–≤–∞–¥—Ä–∞—Ç + —Ç–µ–∫—Å—Ç + –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø)
            item_width = 30 + text_width + 20

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            if current_x + item_width > img_width - 100:  # 100 - —ç—Ç–æ –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                current_x = legend_x
                row_y += 40  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏

            # –†–∏—Å—É–µ–º —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç
            draw.rectangle([current_x, row_y, current_x + 20, row_y + 20], fill=info['rgb'])

            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            draw.text((current_x + 30, row_y), text_content, fill='black', font=font)

            # –û–±–Ω–æ–≤–ª—è–µ–º x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            current_x += item_width

    def _save_pattern_image(self, pattern_image, filename, width, height, colors_count):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        try:
            pattern_image.save(filename, quality=95, dpi=(300, 300))
            print("---")
            print(f"‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üìê –†–∞–∑–º–µ—Ä: {width} √ó {height} –∫—Ä–µ—Å—Ç–∏–∫–æ–≤")
            print(f"üé® –¶–≤–µ—Ç–æ–≤: {colors_count}")
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filename) / 1024:.2f} KB")
            print("---")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


if __name__ == "__main__":
    generator = CrossStitchGenerator()
    generator.generate_pattern(
        image_path="test.jpg",
        max_stitches=120,
        max_colors=20,
        cell_size=30
    )